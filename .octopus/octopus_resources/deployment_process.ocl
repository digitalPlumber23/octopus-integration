step "create-argo-k8s-objects" {
    name = "create argo k8s objects"
    properties = {
        Octopus.Action.TargetRoles = "kubernetes-cluster"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                kubectl create ns argocd
                kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "postgresql-helmchart-deploy" {
    name = "postgresql helmchart deploy"
    properties = {
        Octopus.Action.TargetRoles = "kubernetes-cluster"
    }

    action {
        action_type = "Octopus.HelmChartUpgrade"
        properties = {
            Octopus.Action.Helm.ResetValues = "True"
            Octopus.Action.Helm.TemplateValuesSources = <<-EOT
                [
                  {
                    "Type": "InlineYaml",
                    "Value": "postgresql:\n  fullnameOverride: postgresql-development\n  auth:\n    postgresPassword: postgres"
                  }
                ]
                EOT
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Package.DownloadOnTentacle = "True"
            Octopus.Action.Package.FeedId = "postgresql-feed"
            Octopus.Action.Package.PackageId = "postgresql"
            Octopus.Action.Script.ScriptSource = "Package"
        }
        worker_pool = "hosted-ubuntu"

        packages {
            acquisition_location = "ExecutionTarget"
            feed = "postgresql-feed"
            package_id = "postgresql"
            properties = {
                SelectionMode = "immediate"
                ValuesFilePath = ""
            }
        }
    }
}

step "deploy-a-helm-chart" {
    name = "Deploy a Helm Chart"
    properties = {
        Octopus.Action.TargetRoles = "kubernetes-cluster"
    }

    action {
        action_type = "Octopus.HelmChartUpgrade"
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Helm.ChartDirectory = "worker/"
            Octopus.Action.Helm.ReleaseName = "example-voting-app-infra"
            Octopus.Action.Helm.ResetValues = "True"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool = "hosted-windows"
        worker_pool_variable = ""
    }
}