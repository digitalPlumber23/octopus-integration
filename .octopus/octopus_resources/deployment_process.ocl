step "create-argo-k8s-objects" {
    name = "create argo k8s objects"
    properties = {
        Octopus.Action.TargetRoles = "kubernetes-cluster"
    }

    action {
        action_type = "Octopus.Script"
        is_disabled = true
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                kubectl create ns argocd
                kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
                
                kubectl create namespace argo-rollouts
                kubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/latest/download/install.yaml
                
                kubectl get crds
                kubectl api-resources
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "deploy-postgresql" {
    name = "deploy postgresql"
    properties = {
        Octopus.Action.TargetRoles = "kubernetes-cluster"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                
                helm repo add bitnami https://charts.bitnami.com/bitnami
                helm repo update
                helm install postgresql bitnami/postgresql
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
            OctopusUseBundledTooling = "False"
        }
    }
}

step "deploy-a-helm-chart" {
    name = "deploy worker"
    properties = {
        Octopus.Action.TargetRoles = "kubernetes-cluster"
    }

    action "deploy-worker" {
        action_type = "Octopus.HelmChartUpgrade"
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Helm.ChartDirectory = "worker/"
            Octopus.Action.Helm.ResetValues = "True"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool = "hosted-windows"
        worker_pool_variable = ""
    }
}

step "deploy-vote" {
    name = "deploy vote"
    properties = {
        Octopus.Action.TargetRoles = "kubernetes-cluster"
    }

    action {
        action_type = "Octopus.HelmChartUpgrade"
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Helm.ChartDirectory = "vote/"
            Octopus.Action.Helm.ResetValues = "True"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "deploy-result" {
    name = "deploy result"
    properties = {
        Octopus.Action.TargetRoles = "kubernetes-cluster"
    }

    action {
        action_type = "Octopus.HelmChartUpgrade"
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Helm.ChartDirectory = "result/"
            Octopus.Action.Helm.ResetValues = "True"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool = "hosted-ubuntu"
    }
}